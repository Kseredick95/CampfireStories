{"version":3,"sources":["utils/APIuser.js","components/Register/index.js","pages/Register.js","App.js","serviceWorker.js","index.js"],"names":["userData","axios","post","emailRegex","RegExp","Register","props","handleSubmit","e","preventDefault","formErrors","rest","valid","Object","values","forEach","val","length","formValid","state","console","log","firstName","lastName","email","password","user","API","firstname","lastname","error","handleChange","target","name","value","test","setState","this","className","onSubmit","noValidate","htmlFor","placeholder","type","formNoValidate","onChange","Component","RenderReg","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a6afd506.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all saved user\r\n  getSavedUser: function() {\r\n    return axios.get(\"/api/user\");\r\n  },\r\n  // Deletes the saved user with the given id\r\n  deleteUser: function(id) {\r\n    return axios.delete(\"/api/user/\" + id);\r\n  },\r\n  // Saves an user to the database\r\n  saveUser: function(userData) {\r\n    return axios.post(\"/api/user\", userData);\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\nimport \"./style.css\";\nimport API from \"../../utils/APIuser\";\n\nconst emailRegex = RegExp(\n  /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n);\n\nconst formValid = ({ formErrors, ...rest }) => {\n  let valid = true;\n\n  //validating form errors being empty\n  Object.values(formErrors).forEach((val) => {\n    val.length > 0 && (valid = false);\n  });\n\n  //validating form was filled\n  Object.values(rest).forEach((val) => {\n    val === null && (valid = false);\n  });\n\n  return valid;\n};\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      firstName: null,\n      lastName: null,\n      email: null,\n      password: null,\n      formErrors: {\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\",\n      },\n    };\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (formValid(this.state)) {\n      console.log(`\n      ---SUBMITTING---\n      First Name: ${this.state.firstName}\n      Last Name: ${this.state.lastName}\n      Email: ${this.state.email}\n      Password: ${this.state.password}\n      `);\n    } else {\n      console.error(\"FORM INVALID - SEE ERROR MESSAGES\");\n      return;\n    }\n    const user = this.state;\n    console.log(user)\n\n    API.saveUser({\n      firstname: user.firstName,\n      lastname: user.lastName,\n      email: user.email,\n      password: user.password\n    })\n  };\n\n  handleChange = (e) => {\n    e.preventDefault();\n    const { name, value } = e.target;\n    let formErrors = this.state.formErrors;\n\n    switch (name) {\n      case \"firstName\":\n        formErrors.firstName =\n          value.length < 2 ? \"minimum 2 characters required\" : \"\";\n        break;\n      case \"lastName\":\n        formErrors.lastName =\n          value.length < 2 ? \"minimum 2 characters required\" : \"\";\n        break;\n      case \"email\":\n        formErrors.email = emailRegex.test(value)\n          ? \"\"\n          : \"invalid email address\";\n        break;\n      case \"password\":\n        formErrors.password =\n          value.length < 6 ? \"minimum 6 characters required\" : \"\";\n        break;\n      default:\n        break;\n    }\n\n    this.setState({ formErrors, [name]: value }, () => console.log(this.state));\n  };\n\n  render() {\n    const { formErrors } = this.state;\n    return (\n      <div className=\"wrapper\">\n        <div className=\"form-wrapper\">\n          <h1>Create Account</h1>\n          <form onSubmit={this.handleSubmit} noValidate>\n            {\n              //Input for First Name\n            }\n            <div className=\"firstName\">\n              <label htmlFor=\"firstName\"> First Name</label>\n              <input\n                className={formErrors.firstName.length > 0 ? \"error\" : null}\n                placeholder=\"First Name\"\n                type=\"text\"\n                name=\"firstName\"\n                formNoValidate\n                onChange={this.handleChange}\n              />\n              {formErrors.firstName.length > 0 && (\n                <span className=\"errorMessage\">{formErrors.firstName}</span>\n              )}\n            </div>\n            {\n              //Form input for Last Name\n            }\n            <div className=\"lastName\">\n              <label htmlFor=\"lastName\"> Last Name</label>\n              <input\n                className={formErrors.lastName.length > 0 ? \"error\" : null}\n                placeholder=\"Last Name\"\n                type=\"text\"\n                name=\"lastName\"\n                formNoValidate\n                onChange={this.handleChange}\n              />\n              {formErrors.lastName.length > 0 && (\n                <span className=\"errorMessage\">{formErrors.lastName}</span>\n              )}\n            </div>\n            {\n              //Form input for Email\n            }\n            <div className=\"email\">\n              <label htmlFor=\"email\"> Email</label>\n              <input\n                className={formErrors.email.length > 0 ? \"error\" : null}\n                placeholder=\"Email\"\n                type=\"email\"\n                name=\"email\"\n                formNoValidate\n                onChange={this.handleChange}\n              />\n              {formErrors.email.length > 0 && (\n                <span className=\"errorMessage\">{formErrors.email}</span>\n              )}\n            </div>\n            {\n              //Form input for Password\n            }\n            <div className=\"password\">\n              <label htmlFor=\"password\"> Password</label>\n              <input\n                className={formErrors.password.length > 0 ? \"error\" : null}\n                placeholder=\"Password\"\n                type=\"password\"\n                name=\"password\"\n                formNoValidate\n                onChange={this.handleChange}\n              />\n              {formErrors.password.length > 0 && (\n                <span className=\"errorMessage\">{formErrors.password}</span>\n              )}\n            </div>\n\n            {\n              //Create Account Button\n            }\n            <div className=\"createAccount\">\n              <button type=\"submit\"> Create Account </button>\n              <small>Already Have an Account?</small>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Register;\n","import React from \"react\";\nimport Register from \"../components/Register\";\n\nfunction RenderReg() {\n  return <Register />;\n}\n\nexport default RenderReg;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport RenderReg from \"./pages/Register\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path={[\"/\", \"/register\"]}>\n            <RenderReg />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}